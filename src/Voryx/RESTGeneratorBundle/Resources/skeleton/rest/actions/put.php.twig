    /**
{% block phpdoc_method_header %}
     * Update a {{ entity }} entity.
     *
{% block documentation %}
{% if document %}
     * @ApiDoc(
     *   resource = true,
     *   description = "Update to a {{ entity }} entity.",
     *   section = "{{ entity_plural }}",
     *   input = {
     *      "class" = "{{ namespace }}\Form\{{ entity }}Type",
     *      "name" = ""
     *   },
     *   output = {
     *      "class" = "{{ namespace }}\Entity\{{ entity }}",
{% if outputGroups | length %}
     *      "groups" = {
{%- for group in outputGroups -%}
    "{{- group -}}"
    {%- if not loop.last -%}
        {{ ', ' }}
    {%- endif -%}
{%- endfor -%}
                }
{% endif %}
     *   },
     *   statusCodes = {
     *     200 = "Updated object.",
     *     400 = "Bad Request. Verify your params.",
     *     404 = "Not Found.",
     *     500 = "Form has errors."
     *   }
     * )
     *
{% endif %}
{% endblock documentation %}
     * @View(
{% if outputGroups | length %}
     *   serializerGroups={
    {%- for group in outputGroups -%}
        "{{- group -}}"
        {%- if not loop.last -%}
            {{ ', ' }}
        {%- endif -%}
    {%- endfor -%}
            },
{% endif %}
     *   serializerEnableMaxDepthChecks=true
     * )
     *
     * @param Request $request
     * @param $entity
     *
     * @return FOSView|Response|{{ entity }}
{% endblock phpdoc_method_header %}
{% block phpdoc_method_annotations %}
{% if 'annotation' == format %}{% endif %}
{% endblock phpdoc_method_annotations %}
     */
{% block method_definition %}
    public function putAction(Request $request, {{ entity }} $entity)
{% endblock method_definition %}
    {
{% block method_body %}
        try {
            $em = $this->getDoctrine()->getManager();
            $request->setMethod('PATCH'); //Treat all PUTs as PATCH
            $form = $this->createForm(get_class(new {{ entity }}Type()), $entity, array("method" => $request->getMethod()));
            $this->removeExtraFields($request, $form);
            $form->handleRequest($request);
            if ($form->isValid()) {
                $em->flush();

                return $entity;
            }

            return FOSView::create(array('errors' => $form->getErrors()), Response::HTTP_INTERNAL_SERVER_ERROR);
        } catch (\Exception $e) {
            return FOSView::create($e->getMessage(), Response::HTTP_INTERNAL_SERVER_ERROR);
        }
{% endblock method_body %}
{% block method_return '' %}
    }

{% block form '' %}
